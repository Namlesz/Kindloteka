@page "/rezerwacja"
@using Kindloteka.Models
@inject Services.EmailService MailService
@inject NavigationManager NavManager

<PageTitle>Kindloteka</PageTitle>
<h1>Rezerwacja</h1>

@if (IsLoading)
{
    <h4 class="text-secondary">Składanie rezerwacji</h4>
    <div class="d-flex justify-content-center mt-3">
        <div class="spinner-border m-6" style="width: 5rem; height: 5rem;" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <h4 class="text-secondary">Po pomyślnej rezerwacji zostaniesz przekierowany na strone główną.</h4>
    <form>
        <div class="form-group mt-2">
            <label for="inputTitle">Tytuł</label>
            <input type="text" class="form-control" id="inputTitle" placeholder=@Title readonly>
        </div>
        <div class="form-group mt-2">
            <label for="inputAuthor">Autor</label>
            <input type="text" class="form-control" id="inputAuthor" placeholder=@Author readonly>
        </div>
        <div class="form-group mt-2">
            <label for="inputName">Imię</label>
            <input type="text" class="form-control" id="inputName" placeholder="Podaj imię" @bind="Name">
        </div>
        <div class="form-group mt-2">
            <label for="inputSurname">Nazwisko</label>
            <input type="text" class="form-control" id="inputSurname" placeholder="Podaj nazwisko" @bind="Surname">
        </div>
        <div class="form-group mt-2">
            <label for="inputClass">Klasa</label>
            <input type="text" class="form-control" id="inputClass" placeholder="Podaj klase" @bind="SchoolClass">
        </div>
        <button type="button" @onclick="SendReservation" class="btn btn-primary mt-3">Zarezerwuj</button>
        @if (ShowError)
        {
            <h5 class="text-danger mt-2">Proszę uzupełnić wszystkie pola.</h5>
        }
    </form>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "title")]
    public string Title { get; set; } = null!;

    [Parameter]
    [SupplyParameterFromQuery(Name = "author")]
    public string Author { get; set; } = null!;

    private string? Name { get; set; }
    private string? Surname { get; set; }
    private string? SchoolClass { get; set; }
    private bool ShowError { get; set; }
    private bool IsLoading { get; set; }

    private async Task SendReservation()
    {
        IsLoading = true;
        var book = new Book(Title, Author);
        var user = new User(Name, Surname, SchoolClass);

        if (IsValidModel(book, user))
        {
            await MailService.SendConfirmEmail(book, user);
            NavManager.NavigateTo("/");
        }
        else
        {
            IsLoading = false;
            ShowError = true;
        }
    }

    private bool IsValidModel(Book book, User user) =>
        !string.IsNullOrEmpty(user.Name) && !string.IsNullOrEmpty(user.Surname) && !string.IsNullOrEmpty(user.SchoolClass)
        && !string.IsNullOrEmpty(book.Title) && !string.IsNullOrEmpty(book.Author);


}